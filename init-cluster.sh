#!/bin/bash
# Utilisation de 'set -e' pour garantir l'arr√™t du script si une erreur survient
set -e

echo "--------------------------------------"
echo "1Ô∏è‚É£ Construction de l'image Docker..."
echo "--------------------------------------"
# Utilisation du nom d'image d√©fini pour le build
docker build -t yazid/hadoop-cluster:latest .

echo "--------------------------------------"
echo "2Ô∏è‚É£ D√©marrage des containers..."
echo "--------------------------------------"
# Recr√©e les conteneurs (master, slave1, slave2)
docker-compose up -d

echo "‚è≥ Attente que SSH soit pr√™t sur tous les noeuds..."
sleep 5

echo "--------------------------------------"
echo "3Ô∏è‚É£ Formatage du NameNode si n√©cessaire..."
echo "--------------------------------------"
# üö® Correction de l'√©tape 3 : Tout sur une ligne unique pour √©viter les erreurs de parsing
# V√©rifie si le fichier VERSION existe (HDFS d√©j√† format√©)
# Si non, formate le NameNode.
docker exec master bash -c 'if [ ! -f /root/hdfs/namenode/current/VERSION ]; then echo "Formatage du NameNode..."; /usr/local/hadoop/bin/hdfs namenode -format -force; fi'

echo "--------------------------------------"
echo "4Ô∏è‚É£ D√©marrage HDFS, YARN et Spark PROPRE..."
echo "--------------------------------------"
# üö® Correction de l'√©tape 4 : Utilise 'source ~/.bashrc' pour charger le PATH et les variables HADOOP
docker exec master bash -c "source ~/.bashrc && /root/start-hadoop.sh"

echo "--------------------------------------"
echo "‚úÖ Cluster initialis√©. UI accessibles :"
echo "- HDFS : http://localhost:9870/"
echo "- YARN : http://localhost:8088/"
echo "- Spark Master : http://localhost:8080/"